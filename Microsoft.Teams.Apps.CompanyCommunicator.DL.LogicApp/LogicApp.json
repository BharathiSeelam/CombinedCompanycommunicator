{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "logicAppName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 80,
      "metadata": {
        "description": "Name of the Logic App."
      }
    },
    "logicAppLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "allowedValues": [
        "[resourceGroup().location]",
        "australiaeast",
        "australiasoutheast",
        "brazilsouth",
        "centralus",
        "eastasia",
        "eastus",
        "eastus2",
        "japaneast",
        "japanwest",
        "northcentralus",
        "northeurope",
        "southcentralus",
        "southeastasia",
        "westeurope",
        "westus"
      ],
      "metadata": {
        "description": "Location of the Logic App."
      }
    }
  },
  "variables": {},
  "resources": [
    {
      "name": "[parameters('logicAppName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[parameters('logicAppLocation')]",
      "tags": {
        "displayName": "LogicApp"
      },
      "apiVersion": "2016-06-01",
      "properties": {
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "actions": {
            "Audience": {
              "inputs": {
                "variables": [
                  {
                    "name": "Audience",
                    "type": "string",
                    "value": "https://graph.microsoft.com/"
                  }
                ]
              },
              "runAfter": {
                "Secret": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "ClientId": {
              "inputs": {
                "variables": [
                  {
                    "name": "ClientId",
                    "type": "string",
                    "value": "e365f9c6-77cc-4914-8a3b-d853ef72c579"
                  }
                ]
              },
              "runAfter": {
                "TenantId": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "Flag": {
              "inputs": {
                "variables": [
                  {
                    "name": "Flag",
                    "type": "boolean",
                    "value": "@false"
                  }
                ]
              },
              "runAfter": {
                "GroupType": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "For_each": {
              "actions": {
                "Condition": {
                  "actions": {
                    "Condition_4": {
                      "actions": {
                        "Set_variable": {
                          "inputs": {
                            "name": "varGroupType",
                            "value": "Microsoft O365 Group"
                          },
                          "runAfter": {},
                          "type": "SetVariable"
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "contains": [
                              "@items('For_each')?['groupTypes']",
                              "Unified"
                            ]
                          }
                        ]
                      },
                      "runAfter": {},
                      "type": "If"
                    },
                    "Condition_5": {
                      "actions": {
                        "Set_variable_2": {
                          "inputs": {
                            "name": "varGroupType",
                            "value": "Mail Enabled Security Group"
                          },
                          "runAfter": {},
                          "type": "SetVariable"
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "contains": [
                                "@items('For_each')?['groupTypes']",
                                "Unified"
                              ]
                            }
                          },
                          {
                            "equals": [
                              "@items('For_each')?['securityEnabled']",
                              true
                            ]
                          },
                          {
                            "equals": [
                              "@items('For_each')?['mailEnabled']",
                              true
                            ]
                          }
                        ]
                      },
                      "runAfter": {
                        "Condition_4": [
                          "Succeeded"
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_6": {
                      "actions": {
                        "Set_variable_3": {
                          "inputs": {
                            "name": "varGroupType",
                            "value": "Distribution Group"
                          },
                          "runAfter": {},
                          "type": "SetVariable"
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "contains": [
                                "@items('For_each')?['groupTypes']",
                                "Unified"
                              ]
                            }
                          },
                          {
                            "equals": [
                              "@items('For_each')?['securityEnabled']",
                              false
                            ]
                          },
                          {
                            "equals": [
                              "@items('For_each')?['mailEnabled']",
                              true
                            ]
                          }
                        ]
                      },
                      "runAfter": {
                        "Condition_5": [
                          "Succeeded"
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_7": {
                      "actions": {
                        "Set_variable_4": {
                          "inputs": {
                            "name": "varGroupType",
                            "value": "Security Group"
                          },
                          "runAfter": {},
                          "type": "SetVariable"
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "contains": [
                                "@items('For_each')?['groupTypes']",
                                "Unified"
                              ]
                            }
                          },
                          {
                            "equals": [
                              "@items('For_each')?['securityEnabled']",
                              true
                            ]
                          },
                          {
                            "equals": [
                              "@items('For_each')?['mailEnabled']",
                              false
                            ]
                          }
                        ]
                      },
                      "runAfter": {
                        "Condition_6": [
                          "Succeeded"
                        ]
                      },
                      "type": "If"
                    },
                    "Insert_Entity": {
                      "inputs": {
                        "body": {
                          "DLID": "@{items('For_each')?['id']}",
                          "DLMail": "@{items('For_each')?['mail']}",
                          "DLMemberCount": "@length(body('HTTP_2')['value'])",
                          "DLName": "@{items('For_each')?['displayName']}",
                          "GroupType": "@{variables('varGroupType')}",
                          "PartitionKey": "Default",
                          "RowKey": "@{items('For_each')?['id']}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuretables']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/Tables/@{encodeURIComponent('DistributionLists')}/entities"
                      },
                      "runAfter": {
                        "Condition_7": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection"
                    }
                  },
                  "else": {
                    "actions": {
                      "Condition_8": {
                        "actions": {},
                        "else": {
                          "actions": {
                            "Insert_or_Merge_Entity": {
                              "inputs": {
                                "body": {
                                  "DLName": "@{items('For_each')?['displayName']}"
                                },
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['azuretables']['connectionId']"
                                  }
                                },
                                "method": "patch",
                                "path": "/Tables/@{encodeURIComponent('DistributionLists')}/entities(PartitionKey='@{encodeURIComponent('Default')}',RowKey='@{encodeURIComponent(items('For_each')?['id'])}')"
                              },
                              "runAfter": {},
                              "type": "ApiConnection"
                            }
                          }
                        },
                        "expression": {
                          "and": [
                            {
                              "equals": [
                                "@items('For_each')?['DLName']",
                                "@items('For_each')?['displayName']"
                              ]
                            }
                          ]
                        },
                        "runAfter": {},
                        "type": "If"
                      }
                    }
                  },
                  "expression": {
                    "or": [
                      {
                        "equals": [
                          "@outputs('Get_entity')['statusCode']",
                          404
                        ]
                      }
                    ]
                  },
                  "runAfter": {
                    "HTTP_2": [
                      "Succeeded"
                    ]
                  },
                  "type": "If"
                },
                "Condition_3": {
                  "actions": {},
                  "else": {
                    "actions": {
                      "For_each_2": {
                        "actions": {
                          "Condition_2": {
                            "actions": {
                              "Insert_Entity_2": {
                                "inputs": {
                                  "body": {
                                    "DLName": "@{items('For_each')?['displayName']}",
                                    "PartitionKey": "Default",
                                    "RowKey": "@{concat(items('For_each')?['id'],items('For_each_2')?['id'])}",
                                    "TeamsID": "@{items('For_each')?['id']}",
                                    "UserEmail": "@{items('For_each_2')?['mail']}",
                                    "UserID": "@{items('For_each_2')?['id']}",
                                    "UserName": "@{items('For_each_2')?['displayName']}"
                                  },
                                  "host": {
                                    "connection": {
                                      "name": "@parameters('$connections')['azuretables']['connectionId']"
                                    }
                                  },
                                  "method": "post",
                                  "path": "/Tables/@{encodeURIComponent('DLUsers')}/entities"
                                },
                                "runAfter": {},
                                "type": "ApiConnection"
                              }
                            },
                            "expression": {
                              "and": [
                                {
                                  "equals": [
                                    "@outputs('Get_entity_2')['statusCode']",
                                    404
                                  ]
                                }
                              ]
                            },
                            "runAfter": {
                              "Get_entity_2": [
                                "Succeeded",
                                "Failed"
                              ]
                            },
                            "type": "If"
                          },
                          "Get_entity_2": {
                            "inputs": {
                              "host": {
                                "connection": {
                                  "name": "@parameters('$connections')['azuretables']['connectionId']"
                                }
                              },
                              "method": "get",
                              "path": "/Tables/@{encodeURIComponent('DLUsers')}/entities(PartitionKey='@{encodeURIComponent('Default')}',RowKey='@{encodeURIComponent(concat(items('For_each')?['id'],items('For_each_2')?['id']))}')"
                            },
                            "runAfter": {},
                            "type": "ApiConnection"
                          }
                        },
                        "foreach": "@body('HTTP_2')['value']",
                        "runAfter": {},
                        "type": "Foreach"
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@length(body('HTTP_2')['value'])",
                          0
                        ]
                      }
                    ]
                  },
                  "runAfter": {
                    "Condition_9": [
                      "Succeeded",
                      "Failed"
                    ]
                  },
                  "type": "If"
                },
                "Condition_9": {
                  "actions": {
                    "For_each_3": {
                      "actions": {
                        "Delete_Entity": {
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuretables']['connectionId']"
                              }
                            },
                            "method": "delete",
                            "path": "/Tables/@{encodeURIComponent('DLUsers')}/entities/etag(PartitionKey='@{encodeURIComponent('Default')}',RowKey='@{encodeURIComponent(concat(item()?['TeamsID'],item()?['UserID']))}')"
                          },
                          "runAfter": {},
                          "type": "ApiConnection"
                        }
                      },
                      "foreach": "@body('Get_entities')?['value']",
                      "runAfter": {},
                      "type": "Foreach"
                    }
                  },
                  "else": {
                    "actions": {
                      "Condition_10": {
                        "actions": {},
                        "else": {
                          "actions": {
                            "For_each_4": {
                              "actions": {
                                "Condition_11": {
                                  "actions": {
                                    "Delete_Entity_2": {
                                      "inputs": {
                                        "host": {
                                          "connection": {
                                            "name": "@parameters('$connections')['azuretables']['connectionId']"
                                          }
                                        },
                                        "method": "delete",
                                        "path": "/Tables/@{encodeURIComponent('DLUsers')}/entities/etag(PartitionKey='@{encodeURIComponent('Default')}',RowKey='@{encodeURIComponent(concat(item()?['TeamsID'],item()?['UserID']))}')"
                                      },
                                      "runAfter": {},
                                      "type": "ApiConnection"
                                    }
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "equals": [
                                          "@length(body('Filter_array'))",
                                          0
                                        ]
                                      }
                                    ]
                                  },
                                  "runAfter": {
                                    "Filter_array": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "If"
                                },
                                "Filter_array": {
                                  "inputs": {
                                    "from": "@body('HTTP_2')['value']",
                                    "where": "@equals(item()?['id'], items('For_each_4')?['UserID'])"
                                  },
                                  "runAfter": {},
                                  "type": "Query"
                                }
                              },
                              "foreach": "@body('Get_entities')?['value']",
                              "runAfter": {},
                              "type": "Foreach"
                            }
                          }
                        },
                        "expression": {
                          "and": [
                            {
                              "equals": [
                                "@length(body('HTTP_2')['value'])",
                                0
                              ]
                            },
                            {
                              "equals": [
                                "@length(body('Get_entities')?['value'])",
                                0
                              ]
                            }
                          ]
                        },
                        "runAfter": {},
                        "type": "If"
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@length(body('HTTP_2')['value'])",
                          0
                        ]
                      },
                      {
                        "not": {
                          "equals": [
                            "@length(body('Get_entities')?['value'])",
                            0
                          ]
                        }
                      }
                    ]
                  },
                  "runAfter": {
                    "Get_entities": [
                      "Succeeded"
                    ]
                  },
                  "type": "If"
                },
                "Get_entities": {
                  "inputs": {
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['azuretables']['connectionId']"
                      }
                    },
                    "method": "get",
                    "path": "/Tables/@{encodeURIComponent('DLUsers')}/entities",
                    "queries": {
                      "$filter": "TeamsID eq '@{items('For_each')?['id']}'"
                    }
                  },
                  "runAfter": {
                    "Condition": [
                      "Succeeded",
                      "Failed"
                    ]
                  },
                  "type": "ApiConnection"
                },
                "Get_entity": {
                  "inputs": {
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['azuretables']['connectionId']"
                      }
                    },
                    "method": "get",
                    "path": "/Tables/@{encodeURIComponent('DistributionLists')}/entities(PartitionKey='@{encodeURIComponent('Default')}',RowKey='@{encodeURIComponent(items('For_each')?['id'])}')"
                  },
                  "runAfter": {},
                  "type": "ApiConnection"
                },
                "HTTP_2": {
                  "inputs": {
                    "authentication": {
                      "audience": "@variables('Audience')",
                      "clientId": "@variables('ClientId')",
                      "secret": "@variables('Secret')",
                      "tenant": "@variables('TenantId')",
                      "type": "ActiveDirectoryOAuth"
                    },
                    "method": "GET",
                    "uri": "@{variables('UserUri')}"
                  },
                  "runAfter": {
                    "Set_UserUri": [
                      "Succeeded"
                    ]
                  },
                  "type": "Http"
                },
                "Set_UserUri": {
                  "inputs": {
                    "name": "UserUri",
                    "value": "https://graph.microsoft.com/v1.0/groups/@{items('For_each')?['id']}/members"
                  },
                  "runAfter": {
                    "Get_entity": [
                      "Succeeded",
                      "Failed"
                    ]
                  },
                  "type": "SetVariable"
                }
              },
              "foreach": "@variables('GroupArray')",
              "runAfter": {
                "PageNationCheck": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            },
            "For_each_5": {
              "actions": {
                "Append_to_array_variable": {
                  "inputs": {
                    "name": "GroupArray",
                    "value": "@items('For_each_5')"
                  },
                  "runAfter": {},
                  "type": "AppendToArrayVariable"
                }
              },
              "foreach": "@body('Get_Groups')['value']",
              "runAfter": {
                "Get_Groups": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            },
            "Get_Groups": {
              "inputs": {
                "authentication": {
                  "audience": "@variables('Audience')",
                  "clientId": "@variables('ClientId')",
                  "secret": "@variables('Secret')",
                  "tenant": "@variables('TenantId')",
                  "type": "ActiveDirectoryOAuth"
                },
                "method": "GET",
                "uri": "@variables('GroupUri')"
              },
              "runAfter": {
                "GroupArray": [
                  "Succeeded"
                ],
                "UserUri": [
                  "Succeeded"
                ]
              },
              "type": "Http"
            },
            "GroupArray": {
              "inputs": {
                "variables": [
                  {
                    "name": "GroupArray",
                    "type": "array"
                  }
                ]
              },
              "runAfter": {
                "boolloopDone": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "GroupType": {
              "inputs": {
                "variables": [
                  {
                    "name": "varGroupType",
                    "type": "string"
                  }
                ]
              },
              "runAfter": {
                "nextlink": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "GroupUri": {
              "inputs": {
                "variables": [
                  {
                    "name": "GroupUri",
                    "type": "string",
                    "value": "https://graph.microsoft.com/v1.0/groups"
                  }
                ]
              },
              "runAfter": {
                "Audience": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "PageNationCheck": {
              "actions": {
                "Set_nextLink": {
                  "inputs": {
                    "name": "nextlink",
                    "value": "@{decodeUriComponent(body('Get_Groups')?['@odata.nextLink'])}"
                  },
                  "runAfter": {},
                  "type": "SetVariable"
                },
                "Until": {
                  "actions": {
                    "For_each_6": {
                      "actions": {
                        "Append_to_array_variable_2": {
                          "inputs": {
                            "name": "GroupArray",
                            "value": "@items('For_each_6')"
                          },
                          "runAfter": {},
                          "type": "AppendToArrayVariable"
                        }
                      },
                      "foreach": "@body('GetGroupsNextPage')['value']",
                      "runAfter": {
                        "GetGroupsNextPage": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach"
                    },
                    "GetGroupsNextPage": {
                      "inputs": {
                        "authentication": {
                          "audience": "@variables('Audience')",
                          "clientId": "@variables('ClientId')",
                          "secret": "@variables('Secret')",
                          "tenant": "@variables('TenantId')",
                          "type": "ActiveDirectoryOAuth"
                        },
                        "method": "GET",
                        "uri": "@variables('nextlink')"
                      },
                      "runAfter": {},
                      "type": "Http"
                    }
                  },
                  "expression": "@equals(variables('bool_loopDone'), true)",
                  "limit": {
                    "count": 5,
                    "timeout": "PT1H"
                  },
                  "runAfter": {
                    "Set_nextLink": [
                      "Succeeded"
                    ]
                  },
                  "type": "Until"
                }
              },
              "else": {
                "actions": {
                  "Set_loopdone": {
                    "inputs": {
                      "name": "bool_loopDone",
                      "value": "@true"
                    },
                    "runAfter": {},
                    "type": "SetVariable"
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "contains": [
                      "@string(body('Get_Groups'))",
                      "odata.nextLink"
                    ]
                  }
                ]
              },
              "runAfter": {
                "For_each_5": [
                  "Succeeded"
                ]
              },
              "type": "If"
            },
            "Secret": {
              "inputs": {
                "variables": [
                  {
                    "name": "Secret",
                    "type": "string",
                    "value": "~I~_YBnL3swKeJZpHBfa9o~qn4H45h7.56"
                  }
                ]
              },
              "runAfter": {
                "ClientId": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "TenantId": {
              "inputs": {
                "variables": [
                  {
                    "name": "TenantId",
                    "type": "string",
                    "value": "73e2dc65-e18d-4421-8da7-e96d82b63aae"
                  }
                ]
              },
              "runAfter": {},
              "type": "InitializeVariable"
            },
            "UserUri": {
              "inputs": {
                "variables": [
                  {
                    "name": "UserUri",
                    "type": "string"
                  }
                ]
              },
              "runAfter": {
                "GroupUri": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "boolloopDone": {
              "inputs": {
                "variables": [
                  {
                    "name": "bool_loopDone",
                    "type": "boolean",
                    "value": "@false"
                  }
                ]
              },
              "runAfter": {
                "Flag": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "nextlink": {
              "inputs": {
                "variables": [
                  {
                    "name": "nextlink",
                    "type": "string"
                  }
                ]
              },
              "runAfter": {
                "TenantId": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            }
          },
          "contentVersion": "1.0.0.0",
          "outputs": {},
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "Recurrence": {
              "recurrence": {
                "frequency": "Month",
                "interval": 1
              },
              "type": "Recurrence"
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "azuretables": {
                "connectionId": "/subscriptions/fb855967-c6c7-44a9-bb38-5d49b9277e3c/resourceGroups/MS-ECIF-USWEST/providers/Microsoft.Web/connections/azuretables",
                "connectionName": "azuretableconnection",
                "id": "/subscriptions/fb855967-c6c7-44a9-bb38-5d49b9277e3c/providers/Microsoft.Web/locations/westus/managedApis/azuretables"
              }
            }
          }
        }
      }
    }
  ],
  "outputs": {}
}